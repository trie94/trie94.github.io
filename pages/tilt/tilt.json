{
    "title":"TILT",
    "thumb":"Media-Bias analyzing tool",
    "tags":"React, WebPack, Chart Js",
    "link":"/tilt",
    "repo":"https://github.com/trie94/rga-intern",
    "prototype":"http://tilt-static-web.s3-website-us-west-2.amazonaws.com/",
    "src": "https://www.youtube.com/embed/cXv0Z786wmE?rel=0",
    "summary": "Tilt is a chrome extension & website that helps people understand their bias by analyzing their media intake.",
    "duration": "3 weeks",
    "role": "Full-Stack web developer",
    "platform": "Website",
    "tool": "React, Webpack, and ChartJs",
    "section1": "1. Tilt monitors your news sources as you browse.",
    "section2": "2. It analyzes those sources and generates a score with a weekly report.",
    "section3": "3. The report contains your most read news topics and articles, and recommends complimentary reading to raise your score.",
    "section4": "The prototype has following features: User profile generating system, Media-bias scoring system, and Report rendering system. The figure below briefly shows how the systems are designed. In order to prove the concept, our team created a website prototype that renders 6 different report examples, one for each persona.",
    "section5":"User profile generating system creates a pseudo user media intake history based on the following properties: bias and the credibility level of a user's general media intake, total number of articles that the user has read over the past week, and average time that the user has spent for each article. Following code snippet shows how it generates a user profile.",
    "section6":"Following is an example of a generated user profile who generally reads centered articles with high credibility.",
    "section7":"Once a user profile is generated, the scoring system extracts the data and give a score to the user. It generates a score by compiling how the bias of the articles is balanced/ centered and how credible the articles are. Also, the system checks the time threshold to check if the user actually has read the article. The system returns a score in a range of 0 to 100.",
    "section8":"The report rendering system provides a summary with a emoji that symbolizes their media intake. There are five types of emojis which change based on the score. Color of the emoji indicates the side of the bias spectrum. Blue means left-sided, purple means centered, and red means right-sided.",
    "bias_spectrum": "far left – left – mid left – center – mid right – right – far right",
    "credibility_spectrum": "low - mid - high",
    "section9": "Our goal is to prove if it generates a valid score based on the user’s media intake data. Thus, we created a scoring system that compiles three metrics to generate a overall score – bias level, credibility level, and time spent on articles.",
    "section10": "In order to validate the scoring system, we need a different set of user media intake data. That is the part where a user profile generator is required which creates pseudo user data by receiving four properties.",
    "bias_level": "average bias level of articles that a user has read during a week (far left – left – mid left – center – mid right – right – far right)",
    "credibility_level": "average credibility level of articles that a user has read during a week (low – mid – high)",
    "total_number": "of articles that a user read",
    "average_time": "for reading an article",
    "section11": "Once it generates a user profile, the scoring system receives the data and returns a report with a total score, bias rating, average credibility level, total number of articles that a user read, time spent for each news platform, total time spent for reading articles, and top 3 news platform.",
    "code1":"function generateProfile(bias, cred, num, time) {\n\tlet profile = [];\n\n\tlet sources = [];\n\tlet avg_time = [];\n\tlet issues = [];\n\tlet temp_article = \"\";\n\tlet topic = \"Politics\";\n\n\tfor (let i = 0; i < num; i++) {\n\t\tsources[i] = getArticle(reading_biases[i], cred);\n\t\tavg_time[i] = time + getRandomFloat(-1, 1);\n\t\tissues[i] = getIssue();\n\n\t\tif (sources[i] !== undefined) {\n\t\t\ttemp_article = sources[i].concat();\n\t\t}\n\t}\n\n\tfor (let i = 0; i < num; i++) {\n\t\tif (sources[i] === undefined) {\n\t\t\tsources[i] = temp_article;\n\t\t}\n\n\t\tlet intake = new Media_intake(sources[i], topic, issues[i], avg_time[i]);\n\t\tprofile.push(intake);\n\t}\n\treturn profile;\n}\n\n// media intake object\nfunction Media_intake(source, topic, issue, time){\n\tthis.source = source;\n\tthis.topic = topic;\n\tthis.issue = issue;\n\tthis.time = time;\n}",
    "code2":"let bias = \"center\";\nlet cred = \"high\";\nlet totalNum = 15;\nlet avgTime = 10;\n\nlet user = generateProfile(bias, cred, totalNum, avgTime);",
    "code3":"let bias = \"center\";\nlet cred = \"high\";\nlet totalNum = 15;\nlet avgTime = 10;\n\nlet user = generateProfile(bias, cred, totalNum, avgTime);"
}