{
    "title":"TILT",
    "thumb":"Media-Bias analyzing tool",
    "tags":"React, WebPack, Chart Js",
    "link":"/tilt",
    "repo":"https://github.com/trie94/rga-intern",
    "prototype":"http://tilt-static-web.s3-website-us-west-2.amazonaws.com/",
    "src": "https://www.youtube.com/embed/cXv0Z786wmE?rel=0",
    "summary": "Tilt is a chrome extension & website that helps people understand their bias by analyzing their media intake.",
    "duration": "3 weeks",
    "role": "Full-Stack web developer",
    "platform": "Website",
    "tool": "React, Webpack, and ChartJs",
    "section1": "1. Tilt monitors your news sources as you browse.",
    "section2": "2. It analyzes those sources and generates a score with a weekly report.",
    "section3": "3. The report contains your most read news topics and articles, and recommends complimentary reading to raise your score.",
    "section4":"In order to prove the concept, our team created a website prototype that renders 6 different report examples, one for each persona. In the above prototype, the personas are represented in the buttons with initials of bias and credibility levels. For instance, FR/L means a person who generally consumes articles that are Far-Right sided with Low credibility. We used following spectrums for this project.",
    "section4_2":"The prototype has following systems: User profile generating system, Media-bias scoring system, and Report rendering system. The figure below briefly shows how the systems are designed.",
    "section5":"User profile generating system creates a pseudo user media intake history based on the following properties: bias and the credibility level of a user's general media intake, total number of articles that the user has read over the past week, and average time that the user has spent for each article. Following code snippet shows how it generates a user profile.",
    "section6":"Following is an example of a generated user profile who generally reads centered articles with high credibility.",
    "section7":"The scoring system generates a score by compiling how the bias of the articles is balanced/ centered and how credible the articles are. Also, the system checks the time threshold to check if the user actually has read the article. The system returns a score in a range of 0 to 100. Each criterion has different weight in scoring, 0.6 for the Bias, 0.3 for the Credibility, and 0.1 for the Time.",
    "section7_2":"The score of media bias and credibility is pre-designed in a json file. Total 32 media platforms are mapped in the following object.",
    "section7_3":"Lastly the system averages the total score and returns the final score.",
    "section8":"The report rendering system provides a summary that contains: a emoji that symbolizes their media intake; a bias bar that has a mark where the user is leaning to; a credbility level; total number of articles that the user has read; total time spent for reading articles with top 3 media platforms with a donut chart.",
    "section9":"One of the five types of emojis is provided based on the score. The color of the emoji indicates the side of the bias spectrum. Blue means left-sided, purple means centered, and red means right-sided. The same fashion is applied to the donut chart, indicating the bias of the media platforms with colors.",
    "bias_spectrum": "far left – left – mid left – center – mid right – right – far right",
    "credibility_spectrum": "low - mid - high",
    "section10":"Since the website is a one-page report, each section becomes a component and the root index renders all of them.",
    "bias_level": "average bias level of articles that a user has read during a week (far left – left – mid left – center – mid right – right – far right)",
    "credibility_level": "average credibility level of articles that a user has read during a week (low – mid – high)",
    "total_number": "of articles that a user read",
    "average_time": "for reading an article",
    "section11": "Once it generates a user profile, the scoring system receives the data and returns a report with a total score, bias rating, average credibility level, total number of articles that a user read, time spent for each news platform, total time spent for reading articles, and top 3 news platform.",
    "code1":"function generateProfile(bias, cred, num, time) {\n\tlet profile = [];\n\n\tlet sources = [];\n\tlet avg_time = [];\n\tlet issues = [];\n\tlet temp_article = \"\";\n\tlet topic = \"Politics\";\n\n\tfor (let i = 0; i < num; i++) {\n\t\tsources[i] = getArticle(reading_biases[i], cred);\n\t\tavg_time[i] = time + getRandomFloat(-1, 1);\n\t\tissues[i] = getIssue();\n\n\t\tif (sources[i] !== undefined) {\n\t\t\ttemp_article = sources[i].concat();\n\t\t}\n\t}\n\n\tfor (let i = 0; i < num; i++) {\n\t\tif (sources[i] === undefined) {\n\t\t\tsources[i] = temp_article;\n\t\t}\n\n\t\tlet intake = new Media_intake(sources[i], topic, issues[i], avg_time[i]);\n\t\tprofile.push(intake);\n\t}\n\treturn profile;\n}\n\n// media intake object\nfunction Media_intake(source, topic, issue, time){\n\tthis.source = source;\n\tthis.topic = topic;\n\tthis.issue = issue;\n\tthis.time = time;\n}",
    "code2":"let bias = \"center\";\nlet cred = \"high\";\nlet totalNum = 15;\nlet avgTime = 10;\n\nlet user = generateProfile(bias, cred, totalNum, avgTime);",
    "code3":"let bias = \"center\";\nlet cred = \"high\";\nlet totalNum = 15;\nlet avgTime = 10;\n\nlet user = generateProfile(bias, cred, totalNum, avgTime);",
    "code4":"\"sample_platform\":{\n\t\"name\":\"platform name\",\n\t\"bias\":\"0.7\",\n\t\"credibility\":\"0.85\",\n\t\"domain\":\"http://sample_platform.com/\",\n\t\"side\":\"mid_right\"\n},",
    "code5":"// time threshold to check if the user read the article\nconst time_threshold = 3;\n\n// multipliers\nconst B = 0.6;\nconst C = 0.3;\nconst T = 0.1;\n\n// extract bias, cred, and time components from each history element\nfunction extractComponent(media_intake){\n\tlet score_components = {\n\t\tbias: \"\",\n\t\tcred: \"\",\n\t\ttime: \"\"\n\t};\n\n\tfor(let source_id of Object.keys(news)){\n\t\tif (source_id === media_intake.source.toLowerCase()){\n\t\t\tscore_components.bias = news[source_id].bias;\n\t\t\tscore_components.cred = news[source_id].credibility;\n\t\t\tscore_components.time = media_intake.time;\n\t\t}\n\t}\n\treturn score_components;\n}\n\n// get a score for each history element \nfunction getSingleScore(bias, cred, time) {\n\t&hellip;\n\tconverted_bias *= B;\n\tconverted_credibility *= C;\n\tconverted_time *= T;\n\t&hellip;\n\tlet score = (converted_time + converted_bias + converted_credibility);\n\tscore = (Math.round(score) * 100) * 0.01;\n\n\treturn score;\n}",
    "code6":"<div className=\"app-container\">\n\t<Header />\n\t<div className=\"row\">\n\t\t<Emoji bias={this.state.bias} score={this.state.score} />\n\t\t<BiasBar bias={this.state.bias} cred={this.state.cred} totalNum={this.state.totalNum} />\n\t<TimeSpent profile={this.state.profile} />\n\t</div>\n</div>"
}